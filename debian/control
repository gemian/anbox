Source: anbox
Section: contrib/utils
Priority: optional
Maintainer: Adam Boardman <adamboardman@gmail.com>
XSBC-Original-Maintainer: Shengjing Zhu <zhsj@debian.org>
Rules-Requires-Root: no
Build-Depends: debhelper,
               pkg-config,
               dh-systemd,
               cmake,
               cmake-data,
               google-mock,
               libboost-dev,
               libboost-filesystem-dev,
               libboost-log-dev,
               libboost-iostreams-dev,
               libboost-program-options-dev,
               libboost-system-dev,
               libboost-test-dev,
               libboost-thread-dev,
               libcap-dev,
               libdbus-1-dev,
               libdbus-cpp-dev,
               libegl1-mesa-dev,
               libgles2-mesa-dev,
               libglib2.0-dev,
               libglm-dev,
               libgtest-dev,
               liblxc1,
               libproperties-cpp-dev,
               libprotobuf-dev,
               libsdl2-dev,
               libsdl2-image-dev,
               lxc-dev,
               protobuf-compiler,
               dbus,
               libexpat1-dev,
               libsystemd-dev,
	       python3
Standards-Version: 3.9.7
Homepage: https://anbox.io
Vcs-Browser: https://github.com/gemian/anbox
Vcs-Git: https://github.com/gemian/anbox.git

Package: anbox
Architecture: amd64 arm64 armhf
Built-Using:
 ${misc:Built-Using},
Depends:
 iptables,
 libegl1,
 libgles2,
 ${misc:Depends},
 ${misc:LxcDepends},
 ${shlibs:Depends},
Recommends:
 dbus-user-session,
Description: Android in a box
 Anbox is a container-based approach to boot a full Android system on a
 regular GNU/Linux system.
 .
 In other words: Anbox will let you run Android on your Linux system
 without the slowness of virtualization.
 .
 Anbox uses Linux namespaces (user, pid, uts, net, mount, ipc) to run a
 full Android system in a container and provide Android applications on any
 GNU/Linux-based platform.
 .
 The Android inside the container has no direct access to any hardware. All
 hardware access is going through the anbox daemon on the host. It reuses
 what Android implemented within the QEMU-based emulator for OpenGL ES
 accelerated rendering. The Android system inside the container uses
 different pipes to communicate with the host system and sends all hardware
 access commands through these.
 .
 This package needs Android kernel modules and rootfs image, see
 /usr/share/doc/anbox/README.Debian for information.
